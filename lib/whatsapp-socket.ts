import { io, Socket } from 'socket.io-client'
import { 
  WhatsAppSession, 
  WhatsAppChat, 
  WhatsAppMessage, 
  UserPermissions,
  GetChatsOptions,
  WebSocketResponse,
  PaginationResponse
} from '@/types/whatsapp'

export interface SocketErrorHandlers {
  onConnectionError?: (error: Error, errorType: 'timeout' | 'connection_failed' | 'auth_error' | 'unknown') => void
  onDisconnect?: (reason: string) => void
}

export class WhatsAppSocketService {
  private socket: Socket | null = null
  private errorHandlers: SocketErrorHandlers = {}
  
  connect(token: string, errorHandlers?: SocketErrorHandlers): Socket {
    if (this.socket?.connected) {
      console.log('üîÑ WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ–∫–µ—Ç')
      return this.socket
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    this.errorHandlers = errorHandlers || {}

    // –ü–æ–ª—É—á–∞–µ–º URL –±—ç–∫–µ–Ω–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3000'
    const socketUrl = baseUrl ? `${baseUrl}/whatsapp` : '/whatsapp'
    
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WhatsApp WebSocket:', {
      baseUrl,
      socketUrl,
      hasToken: !!token
    })

    this.socket = io(socketUrl, {
      auth: { token },
      transports: ['websocket', 'polling'],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ timeout
    })
    
    this.setupEventHandlers()
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∫–µ—Ç–∞
    setTimeout(() => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É:', {
        connected: this.socket?.connected,
        id: this.socket?.id,
        hasSocket: !!this.socket
      })
    }, 1000)
    
    return this.socket
  }

  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect()
      this.socket = null
    }
  }

  private setupEventHandlers(): void {
    if (!this.socket) return

    this.socket.on('connect', () => {
      console.log('‚úÖ WhatsApp WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /whatsapp')
    })

    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå WhatsApp WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç namespace /whatsapp, –ø—Ä–∏—á–∏–Ω–∞:', reason)
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
      if (this.errorHandlers.onDisconnect) {
        this.errorHandlers.onDisconnect(reason)
      }
    })

    this.socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp WebSocket:', error)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      let errorType: 'timeout' | 'connection_failed' | 'auth_error' | 'unknown' = 'unknown'
      
      if (error.message.includes('timeout')) {
        errorType = 'timeout'
      } else if (error.message.includes('unauthorized') || error.message.includes('authentication')) {
        errorType = 'auth_error'
      } else if (error.message.includes('connection')) {
        errorType = 'connection_failed'
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
      if (this.errorHandlers.onConnectionError) {
        this.errorHandlers.onConnectionError(error, errorType)
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ–∫–µ—Ç–∞
    this.socket.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error)
      
      if (this.errorHandlers.onConnectionError) {
        this.errorHandlers.onConnectionError(error, 'unknown')
      }
    })
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    this.socket.on('reconnect', (attemptNumber) => {
      console.log('üîÑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ', attemptNumber, '–ø–æ–ø—ã—Ç–æ–∫')
    })
    
    this.socket.on('reconnect_attempt', (attemptNumber) => {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket #', attemptNumber)
    })
    
    this.socket.on('reconnect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
    })
    
    this.socket.on('reconnect_failed', () => {
      console.error('‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
    })
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
  joinSession(sessionId: string): Promise<{ session: WhatsAppSession, permissions: UserPermissions }> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:join_session', { sessionId }, (response: WebSocketResponse<{ session: WhatsAppSession, permissions: UserPermissions }>) => {
        if (response.success && response.data) {
          resolve(response.data)
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏'))
        }
      })
    })
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Å—Å–∏–∏
  leaveSession(sessionId: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:leave_session', { sessionId }, (response: WebSocketResponse<void>) => {
        if (response.success) {
          resolve()
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Å—Å–∏–∏'))
        }
      })
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
  getChats(sessionId: string, options: GetChatsOptions = {}): Promise<{ chats: WhatsAppChat[], pagination: PaginationResponse<WhatsAppChat>['pagination'] }> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:get_chats', { sessionId, ...options }, (response: WebSocketResponse<{ chats: WhatsAppChat[], pagination: PaginationResponse<WhatsAppChat>['pagination'] }>) => {
        if (response.success && response.data) {
          resolve(response.data)
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤'))
        }
      })
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  getMessages(sessionId: string, chatId: string, page = 1, limit = 50): Promise<{ messages: WhatsAppMessage[], pagination: PaginationResponse<WhatsAppMessage>['pagination'] }> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:get_messages', { sessionId, chatId, page, limit }, (response: WebSocketResponse<{ messages: WhatsAppMessage[], pagination: PaginationResponse<WhatsAppMessage>['pagination'] }>) => {
        if (response.success && response.data) {
          resolve(response.data)
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'))
        }
      })
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendMessage(sessionId: string, chatId: string, message: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:send_message', { sessionId, chatId, message }, (response: WebSocketResponse<void>) => {
        if (response.success) {
          resolve()
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'))
        }
      })
    })
  }

  // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  markChatAsRead(sessionId: string, chatId: string): Promise<{ markedCount: number; chat: WhatsAppChat }> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:mark_chat_as_read', { sessionId, chatId }, (response: WebSocketResponse<{ markedCount: number; chat: WhatsAppChat }>) => {
        if (response.success && response.data) {
          resolve(response.data)
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö'))
        }
      })
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
  getSessionStatus(sessionId: string): Promise<WhatsAppSession> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'))
        return
      }

      this.socket.emit('whatsapp:get_session_status', { sessionId }, (response: WebSocketResponse<WhatsAppSession>) => {
        if (response.success && response.data) {
          resolve(response.data)
        } else {
          reject(new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏'))
        }
      })
    })
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  onNewMessage(callback: (data: { sessionId: string, companyId: string, chat: WhatsAppChat, message: WhatsAppMessage }) => void): void {
    this.socket?.on('whatsapp:new_message', callback)
  }

  onChatsUpdated(callback: (data: { sessionId: string, companyId: string }) => void): void {
    this.socket?.on('whatsapp:chats_updated', callback)
  }

  onChatUpdated(callback: (data: { sessionId: string, companyId: string, chat: WhatsAppChat }) => void): void {
    this.socket?.on('whatsapp:chat_updated', callback)
  }

  onSessionStatus(callback: (data: { sessionId: string, status: string, qrCode?: string, phoneNumber?: string, displayName?: string, isConnected?: boolean }) => void): void {
    this.socket?.on('whatsapp:session_status', callback)
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  offNewMessage(callback?: (data: { sessionId: string, companyId: string, chat: WhatsAppChat, message: WhatsAppMessage }) => void): void {
    this.socket?.off('whatsapp:new_message', callback)
  }

  offChatsUpdated(callback?: (data: { sessionId: string, companyId: string }) => void): void {
    this.socket?.off('whatsapp:chats_updated', callback)
  }

  offChatUpdated(callback?: (data: { sessionId: string, companyId: string, chat: WhatsAppChat }) => void): void {
    this.socket?.off('whatsapp:chat_updated', callback)
  }

  offSessionStatus(callback?: (data: { sessionId: string, status: string, qrCode?: string, phoneNumber?: string, displayName?: string, isConnected?: boolean }) => void): void {
    this.socket?.off('whatsapp:session_status', callback)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞
  getSocket(): Socket | null {
    return this.socket
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.socket?.connected || false
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const whatsappSocketService = new WhatsAppSocketService() 