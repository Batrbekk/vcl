import { create } from 'zustand'
import { toast } from 'sonner'
import { Socket } from 'socket.io-client'
import { useAuthStore } from './auth-store'
import { whatsappSocketService, SocketErrorHandlers } from '@/lib/whatsapp-socket'
import { 
  WhatsAppSession, 
  WhatsAppChat, 
  WhatsAppMessage, 
  WhatsAppManagerAccess, 
  WhatsAppStats,
  ApiResponse,
  PaginationResponse,
  CreateSessionRequest,
  ManagerAccessRequest,
  LocalMessage,
  MessageStatus,
  UserPermissions,
  GetChatsOptions
} from '@/types/whatsapp'

interface WhatsAppStore {
  // WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  socket: Socket | null
  isConnected: boolean
  currentSessionId: string | null
  currentChatId: string | null // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
  permissions: UserPermissions | null
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  sessions: WhatsAppSession[]
  chats: WhatsAppChat[]
  messages: WhatsAppMessage[]
  stats: WhatsAppStats | null
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean
  connectionStatus: 'disconnected' | 'connecting' | 'connected' | 'waiting'
  qrCode: string | null
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  localMessages: LocalMessage[]
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  chatsPagination: PaginationResponse<WhatsAppChat>['pagination'] | null
  messagesPagination: PaginationResponse<WhatsAppMessage>['pagination'] | null

  // WebSocket –º–µ—Ç–æ–¥—ã
  initSocket: () => void
  disconnectSocket: () => void
  joinSession: (sessionId: string, isAutomatic?: boolean) => Promise<void>
  leaveSession: (sessionId: string) => Promise<void>
  
  // REST + WebSocket –≥–∏–±—Ä–∏–¥–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  fetchSessions: (silent?: boolean) => Promise<void>
  createSession: (displayName?: string) => Promise<string | null>
  disconnectSession: (sessionId: string) => Promise<void>
  
  // –ú–µ—Ç–æ–¥—ã —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ WebSocket)
  fetchChats: (sessionId: string, options?: GetChatsOptions) => Promise<void>
  fetchMessages: (sessionId: string, chatId: string, page?: number, limit?: number) => Promise<void>
  sendMessage: (sessionId: string, chatId: string, message: string) => Promise<void>
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (REST)
  grantManagerAccess: (sessionId: string, managerId: string, permissions: ('read' | 'write')[]) => Promise<void>
  revokeManagerAccess: (sessionId: string, managerId: string) => Promise<void>
  fetchManagerAccess: (sessionId: string) => Promise<WhatsAppManagerAccess[]>
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  fetchStats: () => Promise<void>
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  addMessage: (message: WhatsAppMessage) => void
  addLocalMessage: (message: LocalMessage) => void
  updateMessageStatus: (messageId: string, status: MessageStatus) => void
  removeLocalMessage: (localId: string) => void
  replaceLocalMessageWithReal: (localMessage: LocalMessage, realMessage: WhatsAppMessage) => void
  cleanupOldLocalMessages: () => void
  updateChatUnreadCount: (chatId: string, count: number) => void
  markChatAsRead: (sessionId: string, chatId: string) => Promise<void>
  setCurrentChat: (chatId: string | null) => void // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
  
  // QR –∫–æ–¥
  getQRCode: (sessionId: string) => Promise<{ qrCode: string; isConnected: boolean } | null>
  
  // Polling –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  startPolling: () => void
  stopPolling: () => void
  
  // –û—Ç–ª–∞–¥–∫–∞
  debugState: () => WhatsAppStore
  
  // Cleanup
  reset: () => void
}

const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3000'

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è polling
let pollingInterval: NodeJS.Timeout | null = null

export const useWhatsAppStore = create<WhatsAppStore>((set, get) => ({
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  socket: null,
  isConnected: false,
  currentSessionId: null,
  currentChatId: null, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  permissions: null,
  sessions: [],
  chats: [],
  messages: [],
  stats: null,
  isLoading: false,
  connectionStatus: 'disconnected',
  qrCode: null,
  localMessages: [],
  chatsPagination: null,
  messagesPagination: null,

  // WebSocket –º–µ—Ç–æ–¥—ã
  initSocket: () => {
    const state = get()
    if (state.socket?.connected) {
      console.log('üîÑ WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
      set({ isConnected: true, connectionStatus: 'connected' })
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å loader –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)
      setTimeout(() => {
        console.log('üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞')
        get().fetchSessions(false) // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å loader
      }, 500)
      return
    }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è WhatsApp namespace...')
    
    const token = useAuthStore.getState().token
    if (!token) {
      console.error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WebSocket')
      return
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      const errorHandlers: SocketErrorHandlers = {
        onConnectionError: (error: Error, errorType: 'timeout' | 'connection_failed' | 'auth_error' | 'unknown') => {
          console.error('–û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
          set({ isConnected: false, connectionStatus: 'disconnected' })
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
          switch (errorType) {
            case 'timeout':
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WhatsApp: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')
              break
            case 'connection_failed':
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WhatsApp: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
              break
            case 'auth_error':
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WhatsApp: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
              break
            default:
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WhatsApp')
              break
          }
        },
        onDisconnect: (reason: string) => {
          console.log('WhatsApp WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç namespace /whatsapp, –ø—Ä–∏—á–∏–Ω–∞:', reason)
          set({ isConnected: false, connectionStatus: 'disconnected' })
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          if (reason !== 'io client disconnect' && reason !== 'client namespace disconnect') {
            toast.warning('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WhatsApp –ø–æ—Ç–µ—Ä—è–Ω–æ')
          }
        }
      }

      const socket = whatsappSocketService.connect(token, errorHandlers)
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      socket.on('connect', () => {
        console.log('‚úÖ WhatsApp WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ namespace /whatsapp')
        const wasDisconnected = !get().isConnected
        set({ isConnected: true, connectionStatus: 'connected' })
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ isConnected –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ true')
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏, –Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (wasDisconnected && get().socket) {
          toast.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å loader –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)
        setTimeout(() => {
          console.log('üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket')
          get().fetchSessions(false) // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å loader
        }, 1000)
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
      console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
        connected: socket.connected,
        id: socket.id
      })

      // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (socket.connected) {
        console.log('‚úÖ –°–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ')
        set({ isConnected: true, connectionStatus: 'connected' })
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å loader –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞) 
        setTimeout(() => {
          console.log('üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞')
          get().fetchSessions(false) // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å loader
        }, 500)
      }

      set({ socket })
      
      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setTimeout(() => {
        const currentState = get()
        console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã:', {
          isConnected: currentState.isConnected,
          socketConnected: currentState.socket?.connected,
          connectionStatus: currentState.connectionStatus,
          sessionsCount: currentState.sessions.length
        })
      }, 2000)

      // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π
      get().startPolling()

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WhatsApp —Å–æ–±—ã—Ç–∏—è
      whatsappSocketService.onNewMessage((data) => {
        console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:', data)
        console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          hasChat: !!data.chat,
          hasMessage: !!data.message,
          sessionId: data.sessionId,
          messageSessionId: data.message?.sessionId,
          chatId: data.chat?.id,
          messageChatId: data.message?.chatId
        })
        const { chat, message } = data
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ
        set((state) => {
          const updatedChats = state.chats.map(c => 
            c.id === chat.id 
              ? { ...c, lastMessageAt: chat.lastMessageAt, lastMessageText: chat.lastMessageText, unreadCount: chat.unreadCount }
              : c
          )
          return { chats: updatedChats }
        })
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        const currentState = get()
        const currentSessionId = currentState.currentSessionId
        const currentChatId = currentState.currentChatId
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          currentSessionId,
          dataSessionId: data.sessionId,
          messageSessionId: message.sessionId,
          currentChatId,
          chatId: chat.id,
          messageChatId: message.chatId,
          messageText: message.body.substring(0, 50) + '...'
        })
        
        if (currentSessionId && data.sessionId === currentSessionId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º –∏ chatId (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–º–∏)
          const matchingLocalMessage = currentState.localMessages.find(local => 
            local.chatId === chat.id && 
            local.body === message.body && 
            local.fromMe === message.fromMe &&
            (local.status === 'sent' || local.status === 'sending')
          )
          
          if (matchingLocalMessage) {
            console.log('‚úÖ –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ')
            // –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
            get().replaceLocalMessageWithReal(matchingLocalMessage, message)
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç
            if (currentChatId === chat.id) {
              console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç')
              get().addMessage(message)
              
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
              if (!message.fromMe && chat.unreadCount > 0) {
                console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ')
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–∞—Ç–∞
                setTimeout(() => {
                  get().markChatAsRead(data.sessionId, chat.id)
                }, 100)
              }
            } else {
              console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç', {
                currentChatId,
                chatId: chat.id
              })
            }
          }
        } else {
          console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è', {
            currentSessionId,
            dataSessionId: data.sessionId
          })
        }
      })

      whatsappSocketService.onChatsUpdated((data) => {
        console.log('–ß–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket:', data)
        const currentSessionId = get().currentSessionId
        if (currentSessionId && data.sessionId === currentSessionId) {
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
          get().fetchChats(currentSessionId)
        }
      })

      whatsappSocketService.onChatUpdated((data) => {
        console.log('–ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket:', data)
        const currentSessionId = get().currentSessionId
        if (currentSessionId && data.sessionId === currentSessionId && data.chat) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
          set((state) => {
            const updatedChats = state.chats.map(c => 
              c.id === data.chat.id ? { ...c, ...data.chat } : c
            )
            return { chats: updatedChats }
          })
        }
      })

      whatsappSocketService.onSessionStatus((data) => {
        console.log('üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket:', data)
        console.log('üîç –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞:', {
          sessionId: data.sessionId,
          status: data.status,
          isConnected: data.isConnected,
          phoneNumber: data.phoneNumber,
          displayName: data.displayName,
          hasQrCode: !!data.qrCode,
          qrCodeLength: data.qrCode?.length,
          timestamp: new Date().toISOString()
        })
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const currentState = get()
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:', {
          sessionsCount: currentState.sessions.length,
          currentSessions: currentState.sessions.map(s => ({
            id: s.id,
            isConnected: s.isConnected,
            phoneNumber: s.phoneNumber,
            displayName: s.displayName
          }))
        })
        
        // –û–±–Ω–æ–≤–ª—è–µ–º QR –∫–æ–¥ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –µ–≥–æ
        if (data.qrCode) {
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º QR –∫–æ–¥ —á–µ—Ä–µ–∑ WebSocket. –î–ª–∏–Ω–∞:', data.qrCode.length)
          set({ qrCode: data.qrCode, connectionStatus: 'waiting' })
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        set((state) => {
          const updatedSessions = state.sessions.map(session =>
            session.id === data.sessionId 
              ? { 
                  ...session, 
                  isConnected: data.isConnected || false,
                  phoneNumber: data.phoneNumber || session.phoneNumber,
                  displayName: data.displayName || session.displayName
                }
              : session
          )
          
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –≤ store:', {
            sessionId: data.sessionId,
            oldSessions: state.sessions.length,
            newSessions: updatedSessions.length,
            updatedSession: updatedSessions.find(s => s.id === data.sessionId),
            changedSessions: updatedSessions.filter((session, index) => {
              const oldSession = state.sessions[index]
              return !oldSession || 
                     oldSession.isConnected !== session.isConnected || 
                     oldSession.phoneNumber !== session.phoneNumber
            })
          })
          
          return { sessions: updatedSessions }
        })

        if (data.isConnected) {
          console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –æ—á–∏—â–∞–µ–º QR –∫–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å')
          set({ connectionStatus: 'connected', qrCode: null }) // –û—á–∏—â–∞–µ–º QR –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          toast.success(`WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω: ${data.phoneNumber}`)
          
          // –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          console.log('üîÑ –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket')
          get().fetchSessions(true) // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
          setTimeout(() => {
            const afterUpdateState = get()
            console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', {
              sessionsCount: afterUpdateState.sessions.length,
              connectedSessions: afterUpdateState.sessions.filter(s => s.isConnected).length,
              targetSession: afterUpdateState.sessions.find(s => s.id === data.sessionId),
              allSessions: afterUpdateState.sessions.map(s => ({
                id: s.id.slice(0, 8),
                connected: s.isConnected,
                phone: s.phoneNumber
              }))
            })
          }, 1000)
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "connected" –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å, 
        // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        if (data.isConnected) {
          setTimeout(() => {
            const currentState = get()
            const session = currentState.sessions.find(s => s.id === data.sessionId)
            
            console.log('üîç Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã:', {
              sessionFound: !!session,
              sessionConnected: session?.isConnected,
              hasPhoneNumber: !!session?.phoneNumber,
              phoneNotPending: session?.phoneNumber !== 'pending',
              needsUpdate: !session || !session.isConnected || session.phoneNumber === 'pending'
            })
            
            if (!session || !session.isConnected || session.phoneNumber === 'pending') {
              console.log('üîÑ Fallback: —Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã')
              get().fetchSessions(true) // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è fallback
            } else {
              console.log('‚úÖ Fallback: —Å–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
            }
          }, 2000)
        }
      })

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error)
      set({ connectionStatus: 'disconnected' })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp')
    }
  },

  disconnectSocket: () => {
    const state = get()
    if (state.socket) {
      whatsappSocketService.disconnect()
      set({ 
        socket: null, 
        isConnected: false, 
        connectionStatus: 'disconnected',
        currentSessionId: null,
        permissions: null 
      })
    }
  },

  joinSession: async (sessionId: string, isAutomatic = false) => {
    try {
      set({ isLoading: true, connectionStatus: 'connecting' })
      
      const result = await whatsappSocketService.joinSession(sessionId)
      
      set({ 
        currentSessionId: sessionId,
        permissions: result.permissions,
        connectionStatus: 'connected'
      })
      
      console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏:', sessionId, '—Å –ø—Ä–∞–≤–∞–º–∏:', result.permissions)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (isAutomatic) {
        toast.success(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhatsApp —Å–µ—Å—Å–∏–∏`, {
          description: `–°–µ—Å—Å–∏—è: ${sessionId.slice(0, 8)}...`
        })
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏:', error)
      set({ connectionStatus: 'disconnected' })
      
      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏'
      if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        } else if (error.message.includes('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
          errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º WhatsApp'
        } else {
          errorMessage = error.message
        }
      }
      
      toast.error(errorMessage)
      throw error
    } finally {
      set({ isLoading: false })
    }
  },

  leaveSession: async (sessionId: string) => {
    try {
      await whatsappSocketService.leaveSession(sessionId)
      
      set({ 
        currentSessionId: null,
        currentChatId: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        permissions: null,
        chats: [],
        messages: [],
        localMessages: []
      })
      
      console.log('–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Å—Å–∏–∏:', sessionId)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Å—Å–∏–∏:', error)
      
      let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Å—Å–∏–∏'
      if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        } else if (error.message.includes('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
          errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º WhatsApp'
        } else {
          errorMessage = error.message
        }
      }
      
      toast.error(errorMessage)
    }
  },

  // REST API –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
  fetchSessions: async (silent = false) => {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loader —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∏—Ö–∏–π –∑–∞–ø—Ä–æ—Å
      if (!silent) {
        set({ isLoading: true })
      }
      
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π WhatsApp')
      }
      
      const result: ApiResponse<WhatsAppSession[]> = await response.json()
      
      if (result.success && result.data) {
        const currentState = get()
        const currentSessions = currentState.sessions
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const hasStatusChanges = result.data.some(newSession => {
          const existingSession = currentSessions.find(s => s.id === newSession.id)
          return !existingSession || 
                 existingSession.isConnected !== newSession.isConnected ||
                 existingSession.isActive !== newSession.isActive ||
                 existingSession.phoneNumber !== newSession.phoneNumber ||
                 existingSession.displayName !== newSession.displayName
        }) || currentSessions.length !== result.data.length
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (hasStatusChanges) {
          set({ sessions: result.data })
          
          if (!silent) {
            console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—è—Ö, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
            
            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const changes = result.data.map(newSession => {
              const existingSession = currentSessions.find(s => s.id === newSession.id)
              if (!existingSession) {
                return { id: newSession.id.slice(0, 8), change: '–Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è' }
              }
              const changes = []
              if (existingSession.isConnected !== newSession.isConnected) {
                changes.push(`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${existingSession.isConnected} ‚Üí ${newSession.isConnected}`)
              }
              if (existingSession.isActive !== newSession.isActive) {
                changes.push(`–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${existingSession.isActive} ‚Üí ${newSession.isActive}`)
              }
              if (existingSession.phoneNumber !== newSession.phoneNumber) {
                changes.push(`–Ω–æ–º–µ—Ä: ${existingSession.phoneNumber || 'null'} ‚Üí ${newSession.phoneNumber || 'null'}`)
              }
              if (existingSession.displayName !== newSession.displayName) {
                changes.push(`–∏–º—è: ${existingSession.displayName || 'null'} ‚Üí ${newSession.displayName || 'null'}`)
              }
              return changes.length > 0 ? { id: newSession.id.slice(0, 8), change: changes.join(', ') } : null
            }).filter(Boolean)
            
            if (changes.length > 0) {
              console.log('üîÑ –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏—è—Ö:', changes)
            }
          } else {
            console.log('üîá –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—è—Ö')
          }
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
          if (currentState.isConnected && !currentState.currentSessionId) {
            const activeSession = result.data.find(session => session.isConnected && session.isActive)
            if (activeSession && !silent) {
              console.log('üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏:', activeSession.id)
              set({ currentSessionId: activeSession.id })
            }
          }
        } else if (!silent) {
          console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏—è—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error)
      if (!silent) {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏ WhatsApp')
      }
    } finally {
      // –£–±–∏—Ä–∞–µ–º loader —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∏—Ö–∏–π –∑–∞–ø—Ä–æ—Å
      if (!silent) {
        set({ isLoading: false })
      }
    }
  },

  createSession: async (displayName = 'WhatsApp Session') => {
    try {
      set({ isLoading: true })
      const token = useAuthStore.getState().token
      
      const requestData: CreateSessionRequest = { displayName }
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏')
      }
      
      const result: ApiResponse<{ sessionId: string }> = await response.json()
      
      if (result.success && result.data) {
        toast.success('–°–µ—Å—Å–∏—è WhatsApp —Å–æ–∑–¥–∞–Ω–∞')
        await get().fetchSessions()
        return result.data.sessionId
      }
      
      return null
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error)
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é WhatsApp'
      toast.error(errorMessage)
      return null
    } finally {
      set({ isLoading: false })
    }
  },

  disconnectSession: async (sessionId: string) => {
    try {
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions/${sessionId}/disconnect`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏')
      }
      
      const result: ApiResponse<void> = await response.json()
      
      if (result.success) {
        toast.success('–°–µ—Å—Å–∏—è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        await get().fetchSessions()
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –Ω–µ—ë
        if (get().currentSessionId === sessionId) {
          await get().leaveSession(sessionId)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é')
    }
  },

  // WebSocket –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  fetchChats: async (sessionId: string, options: GetChatsOptions = {}) => {
    try {
      const defaultOptions: GetChatsOptions = {
        page: 1,
        limit: 50,
        includeGroups: false,
        includeStatus: false,
        chatType: 'individual',
        ...options
      }

      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId, '—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', defaultOptions)
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤
      get().cleanupOldLocalMessages()
      
      const result = await whatsappSocketService.getChats(sessionId, defaultOptions)
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', result.chats.length)
      set({ 
        chats: result.chats,
        chatsPagination: result.pagination
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket:', error)
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã'
      if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        } else if (error.message.includes('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
          errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º WhatsApp'
        }
      }
      
      toast.error(errorMessage)
    }
  },

  fetchMessages: async (sessionId: string, chatId: string, page = 1, limit = 50) => {
    try {
      set({ isLoading: true })
      
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –¥–ª—è —á–∞—Ç–∞:', chatId)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
      set({ currentChatId: chatId })
      console.log('‚úÖ –¢–µ–∫—É—â–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', chatId)
      
      const result = await whatsappSocketService.getMessages(sessionId, chatId, page, limit)
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', result.messages.length)
      set({ 
        messages: result.messages || [],
        messagesPagination: result.pagination,
        localMessages: [] // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket:', error)
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'
      if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        } else if (error.message.includes('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
          errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º WhatsApp'
        }
      }
      
      toast.error(errorMessage)
    } finally {
      set({ isLoading: false })
    }
  },

  sendMessage: async (sessionId: string, chatId: string, message: string) => {
    try {
      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const localMessage: LocalMessage = {
        localId: `local_${Date.now()}_${Math.random()}`,
        chatId,
        sessionId,
        fromMe: true,
        fromNumber: 'local',
        fromName: '–í—ã',
        body: message,
        messageType: 'text',
        timestamp: new Date().toISOString(),
        isRead: false,
        managerId: null,
        status: 'sending',
        isOptimistic: true
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      get().addLocalMessage(localMessage)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      await whatsappSocketService.sendMessage(sessionId, chatId, message)
      
      // –ü–æ–º–µ—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
      // –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ event 'whatsapp:new_message' –∏ –∑–∞–º–µ–Ω–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ
      set((state) => ({
        localMessages: state.localMessages.map(msg =>
          msg.localId === localMessage.localId
            ? { ...msg, status: 'sent' as MessageStatus }
            : msg
        )
      }))
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', error)
      
      // –ü–æ–º–µ—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–µ
      set((state) => {
        const updatedLocalMessages = state.localMessages.map(msg =>
          msg.chatId === chatId && msg.body === message
            ? { ...msg, status: 'failed' as MessageStatus, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' }
            : msg
        )
        return { localMessages: updatedLocalMessages }
      })
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
      if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'
        } else if (error.message.includes('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
          errorMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º WhatsApp'
        }
      }
      
      toast.error(errorMessage)
    }
  },

  // REST API –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏
  grantManagerAccess: async (sessionId: string, managerId: string, permissions: ('read' | 'write')[]) => {
    try {
      const token = useAuthStore.getState().token
      
      const requestData: ManagerAccessRequest = { 
        managerId,
        canRead: permissions.includes('read'),
        canWrite: permissions.includes('write'),
        canManageChats: false
      }
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions/${sessionId}/access`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞')
      }
      
      const result: ApiResponse<void> = await response.json()
      
      if (result.success) {
        toast.success('–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø')
    }
  },

  revokeManagerAccess: async (sessionId: string, managerId: string) => {
    try {
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions/${sessionId}/access/${managerId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞')
      }
      
      const result: ApiResponse<void> = await response.json()
      
      if (result.success) {
        toast.success('–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø')
    }
  },

  fetchManagerAccess: async (sessionId: string) => {
    try {
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions/${sessionId}/access`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤')
      }
      
      const result: ApiResponse<WhatsAppManagerAccess[]> = await response.json()
      
      if (result.success && result.data) {
        return result.data
      }
      
      return []
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤')
      return []
    }
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  fetchStats: async () => {
    try {
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      }
      
      const result: ApiResponse<WhatsAppStats> = await response.json()
      
      if (result.success && result.data) {
        set({ stats: result.data })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    }
  },

  // QR –∫–æ–¥
  getQRCode: async (sessionId: string) => {
    try {
      console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º QR-–∫–æ–¥ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId)
      const token = useAuthStore.getState().token
      
      const response = await fetch(`${BASE_URL}/api/whatsapp/sessions/${sessionId}/qr`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –∫–æ–¥–∞:', response.status, response.statusText)
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –∫–æ–¥–∞')
      }
      
      const result: ApiResponse<{ qrCode: string; isConnected?: boolean }> = await response.json()
      console.log('üì± –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è QR-–∫–æ–¥–∞:', {
        success: result.success,
        hasQRCode: !!result.data?.qrCode,
        isConnected: result.data?.isConnected,
        qrCodeLength: result.data?.qrCode?.length
      })
      
      if (result.success && result.data) {
        if (result.data.qrCode) {
          console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º QR-–∫–æ–¥ –≤ store')
          set({ qrCode: result.data.qrCode, connectionStatus: 'waiting' })
          return {
            qrCode: result.data.qrCode,
            isConnected: result.data.isConnected || false
          }
        } else if (result.data.isConnected) {
          console.log('‚úÖ –°–µ—Å—Å–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
          
          // –£–±–∏—Ä–∞–µ–º QR-–∫–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
          set({ 
            qrCode: null, 
            connectionStatus: 'connected' 
          })
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Å—Å–∏–π
          set((state) => {
            const updatedSessions = state.sessions.map(session =>
              session.id === sessionId 
                ? { ...session, isConnected: true }
                : session
            )
            return { sessions: updatedSessions }
          })
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          toast.success('WhatsApp —Å–µ—Å—Å–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')
          
          // –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          console.log('üîÑ –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
          get().fetchSessions(true)
          
          return {
            qrCode: '',
            isConnected: true
          }
        } else {
          console.log('‚ÑπÔ∏è QR-–∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ, —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
        }
      }
      
      return null
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥')
      return null
    }
  },

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  addMessage: (message: WhatsAppMessage) => {
    set((state) => ({
      messages: [...state.messages, message]
    }))
  },

  addLocalMessage: (message: LocalMessage) => {
    set((state) => ({
      localMessages: [...state.localMessages, message]
    }))
  },

  updateMessageStatus: (messageId: string, status: MessageStatus) => {
    set((state) => {
      const updatedMessages = state.messages.map(msg =>
        msg.messageId === messageId ? { ...msg, status } : msg
      )
      const updatedLocalMessages = state.localMessages.map(msg =>
        msg.localId === messageId ? { ...msg, status } : msg
      )
      return { messages: updatedMessages, localMessages: updatedLocalMessages }
    })
  },

  removeLocalMessage: (localId: string) => {
    set((state) => ({
      localMessages: state.localMessages.filter(msg => msg.localId !== localId)
    }))
  },

  replaceLocalMessageWithReal: (localMessage: LocalMessage, realMessage: WhatsAppMessage) => {
    set((state) => ({
      localMessages: state.localMessages.filter(msg => msg.localId !== localMessage.localId),
      messages: [...state.messages, realMessage]
    }))
  },

  cleanupOldLocalMessages: () => {
    const now = Date.now()
    const fifteenMinutes = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    set((state) => ({
      localMessages: state.localMessages.filter(msg => {
        const messageTime = new Date(msg.timestamp).getTime()
        const isOld = now - messageTime > fifteenMinutes
        const isSent = msg.status === 'sent'
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return !(isOld && isSent)
      })
    }))
  },

  updateChatUnreadCount: (chatId: string, count: number) => {
    set((state) => {
      const updatedChats = state.chats.map(chat =>
        chat.chatId === chatId ? { ...chat, unreadCount: count } : chat
      )
      return { chats: updatedChats }
    })
  },

  markChatAsRead: async (sessionId: string, chatId: string) => {
    try {
      // –û—Ç–º–µ—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      set((state) => {
        const updatedChats = state.chats.map(chat =>
          chat.id === chatId ? { ...chat, unreadCount: 0 } : chat
        )
        return { chats: updatedChats }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
      const result = await whatsappSocketService.markChatAsRead(sessionId, chatId)
      
      console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–æ ${result.markedCount} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ ${chatId}`)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      set((state) => {
        const updatedChats = state.chats.map(chat =>
          chat.id === chatId ? { ...chat, ...result.chat } : chat
        )
        return { chats: updatedChats }
      })

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', error)
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∑–∞–¥
      const currentState = get()
      const originalChat = currentState.chats.find(chat => chat.id === chatId)
      if (originalChat) {
        set((state) => {
          const updatedChats = state.chats.map(chat =>
            chat.id === chatId ? originalChat : chat
          )
          return { chats: updatedChats }
        })
      }
      
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ')
    }
  },

  setCurrentChat: (chatId: string | null) => {
    console.log('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞:', chatId)
    set({ currentChatId: chatId })
  },

  // Polling –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  startPolling: () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (pollingInterval) {
      clearInterval(pollingInterval)
    }
    
    console.log('‚è≤Ô∏è –ó–∞–ø—É—Å–∫ —Ç–∏—Ö–æ–≥–æ polling –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥ - –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    pollingInterval = setInterval(() => {
      const currentState = get()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (currentState.isConnected) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const pendingSessions = currentState.sessions.filter(session => 
          session.isActive && (!session.isConnected || session.phoneNumber === 'pending')
        )
        
        if (pendingSessions.length > 0) {
          // –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ loader –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
          get().fetchSessions(true) // silent = true
        }
      }
    }, 12000) // –ö–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥
  },

  stopPolling: () => {
    if (pollingInterval) {
      clearInterval(pollingInterval)
      pollingInterval = null
    }
  },

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  debugState: () => {
    const state = get()
    console.log('üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp Store:', {
      isConnected: state.isConnected,
      currentSessionId: state.currentSessionId,
      currentChatId: state.currentChatId,
      messagesCount: state.messages.length,
      localMessagesCount: state.localMessages.length,
      chatsCount: state.chats.length
    })
    return state
  },

  // Cleanup
  reset: () => {
    const state = get()
    if (state.socket) {
      whatsappSocketService.disconnect()
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
    if (pollingInterval) {
      clearInterval(pollingInterval)
      pollingInterval = null
    }
    
    set({
      socket: null,
      isConnected: false,
      currentSessionId: null,
      currentChatId: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
      permissions: null,
      sessions: [],
      chats: [],
      messages: [],
      stats: null,
      isLoading: false,
      connectionStatus: 'disconnected',
      qrCode: null,
      localMessages: [],
      chatsPagination: null,
      messagesPagination: null
    })
  }
}))

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store
export const initWhatsAppSocket = () => {
  const store = useWhatsAppStore.getState()
  if (!store.socket || !store.socket.connected) {
    store.initSocket()
  }
} 