"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Input } from "@/components/ui/input"
import { useWhatsAppStore } from "@/store/whatsapp-store"
import { useManagerStore } from "@/store/managers-store"
import { WhatsAppSession, WhatsAppManagerAccess } from "@/types/whatsapp"
import { Wifi, QrCode, UserPlus, Trash2, Loader2, Users, Eye, Plus, MessageCircle, RefreshCw } from "lucide-react"
import { toast } from "sonner"

interface SessionManagerProps {
  userRole: 'admin' | 'manager'
  onSessionSelect: (sessionId: string) => void
}

export function WhatsAppSessionManager({ userRole, onSessionSelect }: SessionManagerProps) {
  const [selectedSession, setSelectedSession] = useState<WhatsAppSession | null>(null)
  const [accessDialogOpen, setAccessDialogOpen] = useState(false)
  const [manageAccessDialogOpen, setManageAccessDialogOpen] = useState(false)
  const [disconnectDialogOpen, setDisconnectDialogOpen] = useState(false)
  const [sessionToDisconnect, setSessionToDisconnect] = useState<WhatsAppSession | null>(null)
  const [selectedManager, setSelectedManager] = useState("")
  const [permissions, setPermissions] = useState<('read' | 'write')[]>(['read'])
  const [newSessionName, setNewSessionName] = useState("")
  const [isCreatingSession, setIsCreatingSession] = useState(false)
  const [managerAccess, setManagerAccess] = useState<WhatsAppManagerAccess[]>([])
  const [loadingAccess, setLoadingAccess] = useState(false)
  const [isRefreshingQR, setIsRefreshingQR] = useState(false)

  const { 
    sessions,
    currentSessionId,
    isConnected,
    qrCode,
    disconnectSession, 
    grantManagerAccess, 
    revokeManagerAccess,
    fetchManagerAccess,
    createSession,
    joinSession,
    getQRCode,
    fetchSessions
  } = useWhatsAppStore()
  
  const { managers, fetchManagers } = useManagerStore()

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ QR-–∫–æ–¥–∞
  useEffect(() => {
    const disconnectedSession = sessions.find(session => session.isActive && !session.isConnected)
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è QR-–∫–æ–¥–∞:', {
      userRole,
      hasQRCode: !!qrCode,
      qrCodeLength: qrCode?.length,
      sessionsCount: sessions.length,
      hasDisconnectedSession: !!disconnectedSession,
      disconnectedSessionId: disconnectedSession?.id,
      shouldShowQR: userRole === 'admin' && qrCode && sessions.some(session => session.isActive && !session.isConnected),
      allSessions: sessions.map(s => ({
        id: s.id.slice(0, 8),
        isActive: s.isActive,
        isConnected: s.isConnected,
        phoneNumber: s.phoneNumber
      }))
    })
  }, [userRole, qrCode, sessions])

  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Å—Å–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  useEffect(() => {
    console.log('üì± SessionManager: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π:', {
      sessionsCount: sessions.length,
      connectedSessions: sessions.filter(s => s.isConnected).length,
      activeSessions: sessions.filter(s => s.isActive).length,
      currentSessionId,
      isConnected,
      timestamp: new Date().toISOString(),
      sessions: sessions.map(s => ({
        id: s.id.slice(0, 8),
        isActive: s.isActive,
        isConnected: s.isConnected,
        phoneNumber: s.phoneNumber,
        displayName: s.displayName
      }))
    })
  }, [sessions, currentSessionId, isConnected])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  useEffect(() => {
    if (userRole === 'admin') {
      fetchManagers()
    }
  }, [fetchManagers, userRole])

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞
    const disconnectedSession = sessions.find(session => 
      session.isActive && !session.isConnected
    )

    if (userRole === 'admin' && disconnectedSession) {
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:', disconnectedSession.id)
      
      // –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º QR-–∫–æ–¥
      getQRCode(disconnectedSession.id)
      
      // –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
      intervalId = setInterval(() => {
        console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å QR-–∫–æ–¥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:', disconnectedSession.id)
        getQRCode(disconnectedSession.id)
      }, 5000)
    }

    return () => {
      if (intervalId) {
        console.log('üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞')
        clearInterval(intervalId)
      }
    }
  }, [userRole, sessions, getQRCode])

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞
  const handleRefreshQR = async () => {
    if (isRefreshingQR) return
    
    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    const disconnectedSession = sessions.find(session => 
      session.isActive && !session.isConnected
    )
    
    if (!disconnectedSession) {
      toast.error('–ù–µ—Ç –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞')
      return
    }
    
    setIsRefreshingQR(true)
    try {
      console.log('üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:', disconnectedSession.id)
      await getQRCode(disconnectedSession.id)
      toast.success('QR-–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å QR-–∫–æ–¥')
    } finally {
      setIsRefreshingQR(false)
    }
  }

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
  const handleRefreshSessions = async () => {
    try {
      console.log('üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π')
      await fetchSessions(false) // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
      toast.success('–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π')
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ admin)
  const handleCreateSession = async () => {
    if (userRole !== 'admin') return
    
    setIsCreatingSession(true)
    try {
      const sessionId = await createSession(newSessionName || undefined)
      if (sessionId) {
        setNewSessionName("")
        toast.success('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      }
    } catch {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏')
    } finally {
      setIsCreatingSession(false)
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
  const handleJoinSession = async (sessionId: string) => {
    try {
      await joinSession(sessionId)
      onSessionSelect(sessionId)
      toast.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
    } catch {
      toast.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏')
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  const handleDisconnectClick = (session: WhatsAppSession) => {
    if (userRole !== 'admin') return
    setSessionToDisconnect(session)
    setDisconnectDialogOpen(true)
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  const handleConfirmDisconnect = async () => {
    if (!sessionToDisconnect) return
    
    await disconnectSession(sessionToDisconnect.id)
    setDisconnectDialogOpen(false)
    setSessionToDisconnect(null)
  }

  const loadManagerAccess = async (sessionId: string) => {
    setLoadingAccess(true)
    try {
      const access = await fetchManagerAccess(sessionId)
      setManagerAccess(access || [])
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤:", error)
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤")
    } finally {
      setLoadingAccess(false)
    }
  }

  const handleManageAccess = async (session: WhatsAppSession) => {
    setSelectedSession(session)
    setManageAccessDialogOpen(true)
    await loadManagerAccess(session.id)
  }

  const handleGrantAccess = async () => {
    if (!selectedSession || !selectedManager) {
      toast.error("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
      return
    }

    await grantManagerAccess(selectedSession.id, selectedManager, permissions)
    
    setAccessDialogOpen(false)
    setSelectedManager("")
    setPermissions(['read'])
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (manageAccessDialogOpen) {
      await loadManagerAccess(selectedSession.id)
    }
  }

  const handleRevokeAccess = async (sessionId: string, managerId: string) => {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø?")) {
      await revokeManagerAccess(sessionId, managerId)
      await loadManagerAccess(sessionId)
    }
  }

  return (
    <Card className="h-[calc(100vh-8rem)]">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <MessageCircle className="h-6 w-6" />
            <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ WhatsApp</span>
          </div>
          <Button 
            variant="outline" 
            size="sm"
            onClick={handleRefreshSessions}
            disabled={isRefreshingQR}
          >
            <RefreshCw className="h-4 w-4 mr-1" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </CardTitle>
        <CardDescription>
          {userRole === 'admin' 
            ? '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ WhatsApp —Å–µ—Å—Å–∏—è–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º'
            : '–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º WhatsApp —Å–µ—Å—Å–∏—è–º'
          }
        </CardDescription>
      </CardHeader>

      <CardContent className="flex-1 space-y-4">
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
          <div className="flex items-center space-x-2">
            {isConnected ? (
              <>
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                <span className="text-sm text-green-600">WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
              </>
            ) : (
              <>
                <div className="w-2 h-2 bg-red-500 rounded-full" />
                <span className="text-sm text-red-600">WebSocket –æ—Ç–∫–ª—é—á–µ–Ω</span>
              </>
            )}
          </div>
          {currentSessionId && (
            <Badge variant="outline">–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {currentSessionId.slice(0, 8)}...</Badge>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
        {userRole === 'admin' && (
          <div className="space-y-2">
            <div className="flex space-x-2">
              <Input
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                value={newSessionName}
                onChange={(e) => setNewSessionName(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleCreateSession()}
                className="flex-1"
              />
              <Button 
                onClick={handleCreateSession}
                disabled={isCreatingSession}
              >
                {isCreatingSession ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Plus className="mr-2 h-4 w-4" />
                )}
                –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
              </Button>
            </div>
          </div>
        )}

        {/* QR –∫–æ–¥ –¥–ª—è –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
        {userRole === 'admin' && qrCode && sessions.some(session => session.isActive && !session.isConnected) && (
          <div className="p-4 border rounded-lg">
            <h3 className="text-lg font-medium text-center mb-4">–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp</h3>
            {(() => {
              const disconnectedSession = sessions.find(session => session.isActive && !session.isConnected)
              return disconnectedSession && (
                <p className="text-sm text-muted-foreground text-center mb-4">
                  –î–ª—è —Å–µ—Å—Å–∏–∏: <span className="font-medium">{disconnectedSession.displayName || disconnectedSession.id.slice(0, 8)}</span>
                </p>
              )
            })()}
            
            {/* Flex –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è QR-–∫–æ–¥–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π */}
            <div className="flex items-start gap-6">
              {/* QR-–∫–æ–¥ —Å–ª–µ–≤–∞ */}
              <div className="flex-shrink-0">
                <img 
                  key={qrCode}
                  src={qrCode}
                  alt="WhatsApp QR Code" 
                  className="w-64 h-64 border rounded-lg" 
                  style={{ imageRendering: 'crisp-edges' }}
                />
              </div>
              
              {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
              <div className="flex-1 space-y-4">
                <div className="text-sm text-muted-foreground space-y-2">
                  <p>1. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ</p>
                  <p>2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</p>
                  <p>3. –ù–∞–∂–º–∏—Ç–µ &quot;–ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ&quot;</p>
                  <p>4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥</p>
                  <p className="font-medium text-yellow-600">‚è∞ QR –∫–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 20-30 —Å–µ–∫—É–Ω–¥</p>
                </div>
                
                <Button
                  variant="outline"
                  onClick={handleRefreshQR}
                  disabled={isRefreshingQR}
                >
                  {isRefreshingQR ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <RefreshCw className="mr-2 h-4 w-4" />
                  )}
                  –û–±–Ω–æ–≤–∏—Ç—å QR-–∫–æ–¥
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π */}
        <div className="space-y-4">
          {!sessions || sessions.length === 0 ? (
            <div className="text-center py-8">
              <QrCode className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">
                –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
              </h3>
              <p className="mt-1 text-sm text-gray-500">
                {userRole === 'admin' 
                  ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é WhatsApp —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
                  : '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏'
                }
              </p>
            </div>
          ) : (
            sessions.map((session) => (
              <div
                key={session.id}
                className="flex items-center justify-between p-4 border rounded-lg"
              >
                <div className="flex items-center space-x-4">
                  <Avatar className="h-10 w-10">
                    <AvatarImage src="" />
                    <AvatarFallback className="bg-green-100 text-green-600">
                      <MessageCircle className="h-5 w-5" />
                    </AvatarFallback>
                  </Avatar>
                  
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <p className="text-sm font-medium">
                        {session.displayName || `–°–µ—Å—Å–∏—è ${session.id.slice(0, 8)}`}
                      </p>
                      {session.isConnected && (
                        <Badge variant="default" className="text-xs">
                          –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
                        </Badge>
                      )}
                      {session.isActive && !session.isConnected && (
                        <Badge variant="secondary" className="text-xs">
                          –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        </Badge>
                      )}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {session.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  {/* –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º badge */}
                  {currentSessionId === session.id ? (
                    <Badge variant="outline" className="flex items-center space-x-1 border-green-500 text-green-500 py-1.5">
                      <MessageCircle className="h-4 w-4" />
                      <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span>
                    </Badge>
                  ) : session.isConnected ? (
                    /* –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è, –Ω–æ –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
                    <Button
                      variant="outline"
                      onClick={() => handleJoinSession(session.id)}
                    >
                      <Wifi className="mr-2 h-4 w-4" />
                      –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </Button>
                  ) : (
                    /* –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞ */
                    userRole === 'admin' && (
                      <Button
                        variant="outline"
                        onClick={() => getQRCode(session.id)}
                        disabled={isRefreshingQR}
                      >
                        <QrCode className="mr-2 h-4 w-4" />
                        –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥
                      </Button>
                    )
                  )}
                  
                  {userRole === 'admin' && (
                    <>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleManageAccess(session)}
                        disabled={!session.isConnected}
                      >
                        <Eye className="mr-2 h-4 w-4" />
                        –î–æ—Å—Ç—É–ø—ã
                      </Button>
                      
                      <Dialog open={accessDialogOpen} onOpenChange={setAccessDialogOpen}>
                        <DialogTrigger asChild>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setSelectedSession(session)}
                            disabled={!session.isConnected}
                          >
                            <UserPlus className="mr-2 h-4 w-4" />
                            –î–æ—Å—Ç—É–ø
                          </Button>
                        </DialogTrigger>
                      </Dialog>
                      
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => handleDisconnectClick(session)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        –û—Ç–∫–ª—é—á–∏—Ç—å
                      </Button>
                    </>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
      </CardContent>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è */}
      <AlertDialog open={disconnectDialogOpen} onOpenChange={setDisconnectDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–û—Ç–∫–ª—é—á–∏—Ç—å WhatsApp —Å–µ—Å—Å–∏—é?</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é? –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.
              {sessionToDisconnect?.displayName && (
                <span className="block mt-2 font-medium">
                  –°–µ—Å—Å–∏—è: {sessionToDisconnect.displayName}
                </span>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleConfirmDisconnect}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90 text-white"
            >
              –û—Ç–∫–ª—é—á–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ */}
      <Dialog open={accessDialogOpen} onOpenChange={setAccessDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä—É</DialogTitle>
            <DialogDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏ WhatsApp
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="manager-select">–ú–µ–Ω–µ–¥–∂–µ—Ä</Label>
              <Select value={selectedManager} onValueChange={setSelectedManager}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" />
                </SelectTrigger>
                <SelectContent>
                  {(managers || []).map((manager) => (
                    <SelectItem key={manager.id} value={manager.id}>
                      {manager.firstName} {manager.lastName} ({manager.email})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <Separator />
            
            <div className="space-y-4">
              <Label>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</Label>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="read"
                    checked={permissions.includes('read')}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setPermissions(prev => [...prev, 'read'])
                      } else {
                        setPermissions(prev => prev.filter(p => p !== 'read'))
                      }
                    }}
                  />
                  <Label htmlFor="read" className="text-sm">
                    –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="write"
                    checked={permissions.includes('write')}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setPermissions(prev => [...prev, 'write'])
                      } else {
                        setPermissions(prev => prev.filter(p => p !== 'write'))
                      }
                    }}
                  />
                  <Label htmlFor="write" className="text-sm">
                    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                  </Label>
                </div>
              </div>
            </div>
          </div>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setAccessDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleGrantAccess}>
              –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏ */}
      <Dialog open={manageAccessDialogOpen} onOpenChange={setManageAccessDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞–º–∏ –∫ —Å–µ—Å—Å–∏–∏</DialogTitle>
            <DialogDescription>
              –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ WhatsApp —Å–µ—Å—Å–∏–∏
              {selectedSession?.displayName && ` "${selectedSession.displayName}"`}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {loadingAccess ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-6 w-6 animate-spin" />
                <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            ) : managerAccess.length === 0 ? (
              <div className="text-center py-8">
                <Users className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">
                  –ù–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤
                </h3>
                <p className="mt-1 text-sm text-gray-500">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–î–æ—Å—Ç—É–ø&quot; –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {managerAccess.map((access) => (
                  <div key={access.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2">
                        <span className="font-medium">
                          {access.manager.firstName} {access.manager.lastName}
                        </span>
                        <span className="text-sm text-muted-foreground">
                          ({access.manager.email})
                        </span>
                      </div>
                      <div className="flex items-center space-x-2 mt-1">
                        {access.canRead && (
                          <Badge variant="secondary" className="text-xs">
                            –ß—Ç–µ–Ω–∏–µ
                          </Badge>
                        )}
                        {access.canWrite && (
                          <Badge variant="secondary" className="text-xs">
                            –ó–∞–ø–∏—Å—å
                          </Badge>
                        )}
                        {access.canManageChats && (
                          <Badge variant="secondary" className="text-xs">
                            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
                          </Badge>
                        )}
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {new Date(access.grantedAt).toLocaleDateString()} 
                        {access.grantedByUser && ` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${access.grantedByUser.firstName} ${access.grantedByUser.lastName}`}
                      </p>
                    </div>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => handleRevokeAccess(access.sessionId, access.managerId)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </Card>
  )
} 